# Generated from c2llvm.g4 by ANTLR 4.9
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\'")
        buf.write("\u00e2\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4")
        buf.write("\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3")
        buf.write("\n\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\16\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\24\3\24")
        buf.write("\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3!\3!\3!\3!\3!\3\"\3\"\7\"\u00c1\n\"\f\"\16\"")
        buf.write("\u00c4\13\"\3#\6#\u00c7\n#\r#\16#\u00c8\3#\3#\6#\u00cd")
        buf.write("\n#\r#\16#\u00ce\3$\3$\3$\3$\3%\6%\u00d6\n%\r%\16%\u00d7")
        buf.write("\3&\6&\u00db\n&\r&\16&\u00dc\3&\3&\5&\u00e1\n&\2\2\'\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'\3\2\6")
        buf.write("\5\2C\\aac|\6\2\62;C\\aac|\3\2\62;\4\2C\\c|\2\u00e7\2")
        buf.write("\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3")
        buf.write("\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2")
        buf.write("\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2")
        buf.write("\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%")
        buf.write("\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\3M\3\2\2\2\5V\3\2\2\2\7X\3\2\2\2\tZ\3\2\2")
        buf.write("\2\13\\\3\2\2\2\r^\3\2\2\2\17a\3\2\2\2\21c\3\2\2\2\23")
        buf.write("e\3\2\2\2\25g\3\2\2\2\27i\3\2\2\2\31n\3\2\2\2\33t\3\2")
        buf.write("\2\2\35x\3\2\2\2\37z\3\2\2\2!\u0081\3\2\2\2#\u0087\3\2")
        buf.write("\2\2%\u0090\3\2\2\2\'\u0092\3\2\2\2)\u0094\3\2\2\2+\u0096")
        buf.write("\3\2\2\2-\u0098\3\2\2\2/\u009a\3\2\2\2\61\u009c\3\2\2")
        buf.write("\2\63\u009f\3\2\2\2\65\u00a2\3\2\2\2\67\u00a5\3\2\2\2")
        buf.write("9\u00a8\3\2\2\2;\u00ab\3\2\2\2=\u00ae\3\2\2\2?\u00b2\3")
        buf.write("\2\2\2A\u00b9\3\2\2\2C\u00be\3\2\2\2E\u00c6\3\2\2\2G\u00d0")
        buf.write("\3\2\2\2I\u00d5\3\2\2\2K\u00da\3\2\2\2MN\7%\2\2NO\7k\2")
        buf.write("\2OP\7p\2\2PQ\7e\2\2QR\7n\2\2RS\7w\2\2ST\7f\2\2TU\7g\2")
        buf.write("\2U\4\3\2\2\2VW\7>\2\2W\6\3\2\2\2XY\7@\2\2Y\b\3\2\2\2")
        buf.write("Z[\7?\2\2[\n\3\2\2\2\\]\7=\2\2]\f\3\2\2\2^_\7k\2\2_`\7")
        buf.write("h\2\2`\16\3\2\2\2ab\7*\2\2b\20\3\2\2\2cd\7+\2\2d\22\3")
        buf.write("\2\2\2ef\7}\2\2f\24\3\2\2\2gh\7\177\2\2h\26\3\2\2\2ij")
        buf.write("\7g\2\2jk\7n\2\2kl\7u\2\2lm\7g\2\2m\30\3\2\2\2no\7y\2")
        buf.write("\2op\7j\2\2pq\7k\2\2qr\7n\2\2rs\7g\2\2s\32\3\2\2\2tu\7")
        buf.write("h\2\2uv\7q\2\2vw\7t\2\2w\34\3\2\2\2xy\7.\2\2y\36\3\2\2")
        buf.write("\2z{\7t\2\2{|\7g\2\2|}\7v\2\2}~\7w\2\2~\177\7t\2\2\177")
        buf.write("\u0080\7p\2\2\u0080 \3\2\2\2\u0081\u0082\7d\2\2\u0082")
        buf.write("\u0083\7t\2\2\u0083\u0084\7g\2\2\u0084\u0085\7c\2\2\u0085")
        buf.write("\u0086\7m\2\2\u0086\"\3\2\2\2\u0087\u0088\7e\2\2\u0088")
        buf.write("\u0089\7q\2\2\u0089\u008a\7p\2\2\u008a\u008b\7v\2\2\u008b")
        buf.write("\u008c\7k\2\2\u008c\u008d\7p\2\2\u008d\u008e\7w\2\2\u008e")
        buf.write("\u008f\7g\2\2\u008f$\3\2\2\2\u0090\u0091\7#\2\2\u0091")
        buf.write("&\3\2\2\2\u0092\u0093\7,\2\2\u0093(\3\2\2\2\u0094\u0095")
        buf.write("\7\61\2\2\u0095*\3\2\2\2\u0096\u0097\7\'\2\2\u0097,\3")
        buf.write("\2\2\2\u0098\u0099\7-\2\2\u0099.\3\2\2\2\u009a\u009b\7")
        buf.write("/\2\2\u009b\60\3\2\2\2\u009c\u009d\7?\2\2\u009d\u009e")
        buf.write("\7?\2\2\u009e\62\3\2\2\2\u009f\u00a0\7#\2\2\u00a0\u00a1")
        buf.write("\7?\2\2\u00a1\64\3\2\2\2\u00a2\u00a3\7@\2\2\u00a3\u00a4")
        buf.write("\7?\2\2\u00a4\66\3\2\2\2\u00a5\u00a6\7>\2\2\u00a6\u00a7")
        buf.write("\7?\2\2\u00a78\3\2\2\2\u00a8\u00a9\7(\2\2\u00a9\u00aa")
        buf.write("\7(\2\2\u00aa:\3\2\2\2\u00ab\u00ac\7~\2\2\u00ac\u00ad")
        buf.write("\7~\2\2\u00ad<\3\2\2\2\u00ae\u00af\7k\2\2\u00af\u00b0")
        buf.write("\7p\2\2\u00b0\u00b1\7v\2\2\u00b1>\3\2\2\2\u00b2\u00b3")
        buf.write("\7f\2\2\u00b3\u00b4\7q\2\2\u00b4\u00b5\7w\2\2\u00b5\u00b6")
        buf.write("\7d\2\2\u00b6\u00b7\7n\2\2\u00b7\u00b8\7g\2\2\u00b8@\3")
        buf.write("\2\2\2\u00b9\u00ba\7e\2\2\u00ba\u00bb\7j\2\2\u00bb\u00bc")
        buf.write("\7c\2\2\u00bc\u00bd\7t\2\2\u00bdB\3\2\2\2\u00be\u00c2")
        buf.write("\t\2\2\2\u00bf\u00c1\t\3\2\2\u00c0\u00bf\3\2\2\2\u00c1")
        buf.write("\u00c4\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2")
        buf.write("\u00c3D\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c5\u00c7\t\4\2")
        buf.write("\2\u00c6\u00c5\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00c6")
        buf.write("\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca")
        buf.write("\u00cc\7\60\2\2\u00cb\u00cd\t\4\2\2\u00cc\u00cb\3\2\2")
        buf.write("\2\u00cd\u00ce\3\2\2\2\u00ce\u00cc\3\2\2\2\u00ce\u00cf")
        buf.write("\3\2\2\2\u00cfF\3\2\2\2\u00d0\u00d1\7)\2\2\u00d1\u00d2")
        buf.write("\13\2\2\2\u00d2\u00d3\7)\2\2\u00d3H\3\2\2\2\u00d4\u00d6")
        buf.write("\t\4\2\2\u00d5\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7")
        buf.write("\u00d5\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8J\3\2\2\2\u00d9")
        buf.write("\u00db\t\5\2\2\u00da\u00d9\3\2\2\2\u00db\u00dc\3\2\2\2")
        buf.write("\u00dc\u00da\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00e0\3")
        buf.write("\2\2\2\u00de\u00df\7\60\2\2\u00df\u00e1\7j\2\2\u00e0\u00de")
        buf.write("\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1L\3\2\2\2\t\2\u00c2")
        buf.write("\u00c8\u00ce\u00d7\u00dc\u00e0\2")
        return buf.getvalue()


class c2llvmLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    ID = 33
    DOUBLE = 34
    CHAR = 35
    INT = 36
    LIB = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'>'", "'='", "';'", "'if'", "'('", "')'", 
            "'{'", "'}'", "'else'", "'while'", "'for'", "','", "'return'", 
            "'break'", "'continue'", "'!'", "'*'", "'/'", "'%'", "'+'", 
            "'-'", "'=='", "'!='", "'>='", "'<='", "'&&'", "'||'", "'int'", 
            "'double'", "'char'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "DOUBLE", "CHAR", "INT", "LIB" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "ID", "DOUBLE", "CHAR", "INT", "LIB" ]

    grammarFileName = "c2llvm.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


